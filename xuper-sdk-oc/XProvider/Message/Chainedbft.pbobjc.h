// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chainedbft.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class QCSignInfos;
@class QuorumCert;
@class SignInfo;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum QCState

/** QCState is the phase of hotstuff */
typedef GPB_ENUM(QCState) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  QCState_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  QCState_NewView = 0,
  QCState_Prepare = 1,
  QCState_PreCommit = 2,
  QCState_Commit = 3,
  QCState_Decide = 4,
};

GPBEnumDescriptor *QCState_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL QCState_IsValidValue(int32_t value);

#pragma mark - ChainedbftRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface ChainedbftRoot : GPBRootObject
@end

#pragma mark - QuorumCert

typedef GPB_ENUM(QuorumCert_FieldNumber) {
  QuorumCert_FieldNumber_ProposalId = 1,
  QuorumCert_FieldNumber_ProposalMsg = 2,
  QuorumCert_FieldNumber_Type = 3,
  QuorumCert_FieldNumber_ViewNumber = 4,
  QuorumCert_FieldNumber_SignInfos = 5,
};

/**
 * QuorumCert is a data type that combines a collection of signatures from replicas.
 **/
@interface QuorumCert : GPBMessage

/** The id of Proposal this QC certified. */
@property(nonatomic, readwrite, copy, null_resettable) NSData *proposalId;

/** The msg of Proposal this QC certified. */
@property(nonatomic, readwrite, copy, null_resettable) NSData *proposalMsg;

/**
 * The current type of this QC certified.
 * the type contains `NEW_VIEW`, `PREPARE`
 **/
@property(nonatomic, readwrite) QCState type;

/** The view number of this QC certified. */
@property(nonatomic, readwrite) int64_t viewNumber;

/**
 * SignInfos is the signs of the leader gathered from replicas
 * of a specifically certType.
 **/
@property(nonatomic, readwrite, strong, null_resettable) QCSignInfos *signInfos;
/** Test to see if @c signInfos has been set. */
@property(nonatomic, readwrite) BOOL hasSignInfos;

@end

/**
 * Fetches the raw value of a @c QuorumCert's @c type property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t QuorumCert_Type_RawValue(QuorumCert *message);
/**
 * Sets the raw value of an @c QuorumCert's @c type property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetQuorumCert_Type_RawValue(QuorumCert *message, int32_t value);

#pragma mark - QCSignInfos

typedef GPB_ENUM(QCSignInfos_FieldNumber) {
  QCSignInfos_FieldNumber_QcsignInfosArray = 1,
};

/**
 * QCSignInfos is the signs of the leader gathered from replicas of a specifically certType.
 * A slice of signs is used at present.
 * TODO \@qizheng09: It will be change to Threshold-Signatures after
 * Crypto lib support Threshold-Signatures.
 **/
@interface QCSignInfos : GPBMessage

/** QCSignInfos */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<SignInfo*> *qcsignInfosArray;
/** The number of items in @c qcsignInfosArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger qcsignInfosArray_Count;

@end

#pragma mark - SignInfo

typedef GPB_ENUM(SignInfo_FieldNumber) {
  SignInfo_FieldNumber_Address = 1,
  SignInfo_FieldNumber_PublicKey = 2,
  SignInfo_FieldNumber_Sign = 3,
};

/**
 * SignInfo is the signature information of the
 **/
@interface SignInfo : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *address;

@property(nonatomic, readwrite, copy, null_resettable) NSString *publicKey;

@property(nonatomic, readwrite, copy, null_resettable) NSData *sign;

@end

#pragma mark - ChainedBftPhaseMessage

typedef GPB_ENUM(ChainedBftPhaseMessage_FieldNumber) {
  ChainedBftPhaseMessage_FieldNumber_Type = 1,
  ChainedBftPhaseMessage_FieldNumber_ViewNumber = 2,
  ChainedBftPhaseMessage_FieldNumber_ProposalQc = 3,
  ChainedBftPhaseMessage_FieldNumber_JustifyQc = 4,
  ChainedBftPhaseMessage_FieldNumber_MsgDigest = 5,
  ChainedBftPhaseMessage_FieldNumber_Signature = 6,
};

/**
 * ChainedBftPhaseMessage is the proposal message of the protocal.
 * In Hotstuff, there are two kinds of messages, "NEW_VIEW_MESSAGE" and "QC_Message".
 * A stable leader can skip this "NEW_VIEW_MESSAGE".
 **/
@interface ChainedBftPhaseMessage : GPBMessage

/** Message Type: NEW_VIEW_MESSAGE or QC_MESSAGE */
@property(nonatomic, readwrite) QCState type;

/** ViewNumber the current view number */
@property(nonatomic, readwrite) int64_t viewNumber;

/** The new proposal send to other replicas while the */
@property(nonatomic, readwrite, strong, null_resettable) QuorumCert *proposalQc;
/** Test to see if @c proposalQc has been set. */
@property(nonatomic, readwrite) BOOL hasProposalQc;

/** JustifyQC is the QC of the leader gathered, send to next leader, while the message type is "NEW_VIEW_MESSAGE" */
@property(nonatomic, readwrite, strong, null_resettable) QuorumCert *justifyQc;
/** Test to see if @c justifyQc has been set. */
@property(nonatomic, readwrite) BOOL hasJustifyQc;

/** MsgDigest is the digest of the msgg */
@property(nonatomic, readwrite, copy, null_resettable) NSData *msgDigest;

/** Signature for this msg */
@property(nonatomic, readwrite, strong, null_resettable) SignInfo *signature;
/** Test to see if @c signature has been set. */
@property(nonatomic, readwrite) BOOL hasSignature;

@end

/**
 * Fetches the raw value of a @c ChainedBftPhaseMessage's @c type property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t ChainedBftPhaseMessage_Type_RawValue(ChainedBftPhaseMessage *message);
/**
 * Sets the raw value of an @c ChainedBftPhaseMessage's @c type property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetChainedBftPhaseMessage_Type_RawValue(ChainedBftPhaseMessage *message, int32_t value);

#pragma mark - ChainedBftVoteMessage

typedef GPB_ENUM(ChainedBftVoteMessage_FieldNumber) {
  ChainedBftVoteMessage_FieldNumber_ProposalId = 1,
  ChainedBftVoteMessage_FieldNumber_Signature = 2,
};

/**
 * ChainedBftVoteMessage is the vote message of the protocal.
 **/
@interface ChainedBftVoteMessage : GPBMessage

/** The id of this message votes for. */
@property(nonatomic, readwrite, copy, null_resettable) NSData *proposalId;

/** Replica will sign the QCMessage if the QuorumCert if valid. */
@property(nonatomic, readwrite, strong, null_resettable) SignInfo *signature;
/** Test to see if @c signature has been set. */
@property(nonatomic, readwrite) BOOL hasSignature;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
