// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xendorser.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Xendorser.pbobjc.h"
#import "Xchain.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - XendorserRoot

@implementation XendorserRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - XendorserRoot_FileDescriptor

static GPBFileDescriptor *XendorserRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"pb"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - EndorserRequest

@implementation EndorserRequest

@dynamic hasHeader, header;
@dynamic requestName;
@dynamic bcName;
@dynamic hasFee, fee;
@dynamic requestData;

typedef struct EndorserRequest__storage_ {
  uint32_t _has_storage_[1];
  Header *header;
  NSString *requestName;
  NSString *bcName;
  Transaction *fee;
  NSData *requestData;
} EndorserRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "header",
        .dataTypeSpecific.className = GPBStringifySymbol(Header),
        .number = EndorserRequest_FieldNumber_Header,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EndorserRequest__storage_, header),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "requestName",
        .dataTypeSpecific.className = NULL,
        .number = EndorserRequest_FieldNumber_RequestName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(EndorserRequest__storage_, requestName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bcName",
        .dataTypeSpecific.className = NULL,
        .number = EndorserRequest_FieldNumber_BcName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(EndorserRequest__storage_, bcName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fee",
        .dataTypeSpecific.className = GPBStringifySymbol(Transaction),
        .number = EndorserRequest_FieldNumber_Fee,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(EndorserRequest__storage_, fee),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "requestData",
        .dataTypeSpecific.className = NULL,
        .number = EndorserRequest_FieldNumber_RequestData,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(EndorserRequest__storage_, requestData),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[EndorserRequest class]
                                     rootClass:[XendorserRoot class]
                                          file:XendorserRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EndorserRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\002K\000\003F\000\004C\000\005K\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - EndorserResponse

@implementation EndorserResponse

@dynamic hasHeader, header;
@dynamic responseName;
@dynamic endorserAddress;
@dynamic hasEndorserSign, endorserSign;
@dynamic responseData;

typedef struct EndorserResponse__storage_ {
  uint32_t _has_storage_[1];
  Header *header;
  NSString *responseName;
  NSString *endorserAddress;
  SignatureInfo *endorserSign;
  NSData *responseData;
} EndorserResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "header",
        .dataTypeSpecific.className = GPBStringifySymbol(Header),
        .number = EndorserResponse_FieldNumber_Header,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EndorserResponse__storage_, header),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "responseName",
        .dataTypeSpecific.className = NULL,
        .number = EndorserResponse_FieldNumber_ResponseName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(EndorserResponse__storage_, responseName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "endorserAddress",
        .dataTypeSpecific.className = NULL,
        .number = EndorserResponse_FieldNumber_EndorserAddress,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(EndorserResponse__storage_, endorserAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "endorserSign",
        .dataTypeSpecific.className = GPBStringifySymbol(SignatureInfo),
        .number = EndorserResponse_FieldNumber_EndorserSign,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(EndorserResponse__storage_, endorserSign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "responseData",
        .dataTypeSpecific.className = NULL,
        .number = EndorserResponse_FieldNumber_ResponseData,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(EndorserResponse__storage_, responseData),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[EndorserResponse class]
                                     rootClass:[XendorserRoot class]
                                          file:XendorserRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EndorserResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\002L\000\003O\000\004L\000\005L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
